/**
 * Adres API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { PagedPrivileges } from '../model/models';
import { Privilege } from '../model/models';
import { PrivilegeBody } from '../model/models';
import { ProblemDetail } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface PrivilegesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Delete all privileges
     * Delete all privileges 
     * @param xAPIKEY An api key used to track usage of the api
     */
    deleteAllPrivileges(xAPIKEY: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete the specified privilege
     * Delete only the specified privilege 
     * @param id The identification of the resource to return
     * @param xAPIKEY An api key used to track usage of the api
     */
    deletePrivilege(id: number, xAPIKEY: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Retrieve the specified privilege
     * Retrieve only one privilege with id privilegeId 
     * @param id The identification of the resource to return
     * @param xAPIKEY An api key used to track usage of the api
     */
    getPrivilege(id: number, xAPIKEY: string, extraHttpRequestParams?: any): Observable<Privilege>;

    /**
     * Retrieve all known privileges
     * Retrieve all known privileges, using paging and sorting 
     * @param page pagenumber starts on 1
     * @param size number of elements on each page - minimum    1 - default   25 - maximum: 100 
     * @param xAPIKEY An api key used to track usage of the api
     * @param sort field names to sort on
     */
    getPrivileges(page: number, size: number, xAPIKEY: string, sort?: Array<string>, extraHttpRequestParams?: any): Observable<PagedPrivileges>;

    /**
     * Update the specified privilege
     * Update only the privilege specified with privilegeId 
     * @param id The identification of the resource to return
     * @param xAPIKEY An api key used to track usage of the api
     * @param privilegeBody Request parameters
     */
    patchPrivilege(id: number, xAPIKEY: string, privilegeBody?: PrivilegeBody, extraHttpRequestParams?: any): Observable<Privilege>;

    /**
     * Create a new privilege
     * Create a new privileges To determine if an privileges is new the input is compared on the hash value of: - name         If the hash value already exists in the backend, the role is considered to exist 
     * @param xAPIKEY An api key used to track usage of the api
     * @param privilegeBody Request parameters
     */
    postPrivileges(xAPIKEY: string, privilegeBody?: PrivilegeBody, extraHttpRequestParams?: any): Observable<Privilege>;

}
